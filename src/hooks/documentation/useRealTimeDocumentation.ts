
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { documentationService } from '@/services/documentationService';

export interface DocumentationChange {
  documentPath: string;
  updateType: 'auto' | 'manual';
  timestamp: string;
  content?: string;
  changeType?: 'created' | 'modified' | 'deleted';
}

export interface DocumentationStats {
  totalDocuments: number;
  autoGenerated: number;
  upToDate: number;
  needsUpdate: number;
}

export function useRealTimeDocumentation() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [documentationChanges, setDocumentationChanges] = useState<DocumentationChange[]>([]);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [stats, setStats] = useState<DocumentationStats>({
    totalDocuments: 0,
    autoGenerated: 0,
    upToDate: 0,
    needsUpdate: 0
  });

  useEffect(() => {
    initializeDocumentationSystem();
    setupRealTimeSubscription();
    loadInitialData();

    return () => {
      cleanup();
    };
  }, []);

  const initializeDocumentationSystem = async () => {
    try {
      await documentationService.initializeDocumentationSystem();
      setIsInitialized(true);
      setIsMonitoring(true);
    } catch (error) {
      console.error('Failed to initialize documentation system:', error);
    }
  };

  const loadInitialData = async () => {
    try {
      // Load recent changes
      const recentUpdates = await documentationService.getRecentUpdates(20);
      const changes: DocumentationChange[] = recentUpdates.map(update => ({
        documentPath: update.document_path,
        updateType: update.update_type,
        timestamp: update.created_at,
        content: update.content
      }));
      setDocumentationChanges(changes);

      // Load stats
      const docStats = await documentationService.getDocumentationStats();
      setStats(docStats);
    } catch (error) {
      console.error('Failed to load initial documentation data:', error);
    }
  };

  const setupRealTimeSubscription = () => {
    const channel = supabase
      .channel('documentation-updates')
      .on('broadcast', { event: 'documentation_updated' }, (payload) => {
        const change: DocumentationChange = {
          documentPath: payload.payload.documentPath,
          updateType: payload.payload.updateType,
          timestamp: payload.payload.timestamp,
          changeType: payload.payload.changeType
        };
        
        setDocumentationChanges(prev => [change, ...prev.slice(0, 49)]); // Keep last 50 changes
        
        // Update stats
        loadStats();
      })
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'documentation_updates'
      }, (payload) => {
        console.log('Documentation database change:', payload);
        loadStats();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  };

  const loadStats = async () => {
    try {
      const docStats = await documentationService.getDocumentationStats();
      setStats(docStats);
    } catch (error) {
      console.error('Failed to load documentation stats:', error);
    }
  };

  const cleanup = () => {
    setIsMonitoring(false);
  };

  const getRecentChanges = () => {
    return documentationChanges.slice(0, 10);
  };

  const clearChanges = () => {
    setDocumentationChanges([]);
  };

  const generateFullDocumentation = async () => {
    try {
      await documentationService.generateDocumentationForProject();
      await loadInitialData(); // Refresh data
    } catch (error) {
      console.error('Failed to generate full documentation:', error);
    }
  };

  return {
    isInitialized,
    isMonitoring,
    documentationChanges: getRecentChanges(),
    allChanges: documentationChanges,
    stats,
    clearChanges,
    generateFullDocumentation,
    refreshData: loadInitialData
  };
}
