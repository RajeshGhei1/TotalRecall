
import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  FileText, 
  Code, 
  Database, 
  Zap, 
  Search,
  ExternalLink,
  GitBranch,
  Clock
} from 'lucide-react';

interface DocumentationItem {
  id: string;
  title: string;
  type: 'component' | 'hook' | 'service' | 'api' | 'database';
  path: string;
  lastUpdated: string;
  status: 'synced' | 'outdated' | 'generating';
  autoGenerated: boolean;
}

const mockDocumentationItems: DocumentationItem[] = [
  {
    id: '1',
    title: 'CompanyLinkForm Component',
    type: 'component',
    path: 'src/components/people/companyLink/CompanyLinkForm.tsx',
    lastUpdated: '2024-12-13T10:30:00Z',
    status: 'synced',
    autoGenerated: true
  },
  {
    id: '2',
    title: 'useDocumentation Hook',
    type: 'hook',
    path: 'src/hooks/documentation/useDocumentation.ts',
    lastUpdated: '2024-12-13T09:15:00Z',
    status: 'synced',
    autoGenerated: true
  },
  {
    id: '3',
    title: 'Documentation Service',
    type: 'service',
    path: 'src/services/documentationService.ts',
    lastUpdated: '2024-12-13T11:00:00Z',
    status: 'generating',
    autoGenerated: true
  },
  {
    id: '4',
    title: 'People API Endpoints',
    type: 'api',
    path: 'supabase/functions/people',
    lastUpdated: '2024-12-12T16:45:00Z',
    status: 'outdated',
    autoGenerated: false
  }
];

export function LiveDocumentationPanel() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedType, setSelectedType] = useState<string>('all');

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'component': return <Code className="h-4 w-4" />;
      case 'hook': return <Zap className="h-4 w-4" />;
      case 'service': return <FileText className="h-4 w-4" />;
      case 'api': return <ExternalLink className="h-4 w-4" />;
      case 'database': return <Database className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'synced': return 'default';
      case 'outdated': return 'destructive';
      case 'generating': return 'secondary';
      default: return 'outline';
    }
  };

  const filteredItems = mockDocumentationItems.filter(item => {
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.path.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = selectedType === 'all' || item.type === selectedType;
    return matchesSearch && matchesType;
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <GitBranch className="h-5 w-5" />
          Live Documentation Panel
        </CardTitle>
        <CardDescription>
          Real-time documentation status and management
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="overview" className="space-y-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="components">Components</TabsTrigger>
            <TabsTrigger value="apis">APIs & Services</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            <div className="flex gap-4">
              <div className="flex-1">
                <Input
                  placeholder="Search documentation..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full"
                />
              </div>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="px-3 py-2 border rounded-md"
              >
                <option value="all">All Types</option>
                <option value="component">Components</option>
                <option value="hook">Hooks</option>
                <option value="service">Services</option>
                <option value="api">APIs</option>
                <option value="database">Database</option>
              </select>
            </div>

            <div className="grid gap-3">
              {filteredItems.map((item) => (
                <div
                  key={item.id}
                  className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50"
                >
                  <div className="flex items-center gap-3">
                    {getTypeIcon(item.type)}
                    <div>
                      <div className="font-medium">{item.title}</div>
                      <div className="text-sm text-muted-foreground flex items-center gap-2">
                        <span>{item.path}</span>
                        {item.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            Auto-generated
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="text-xs text-muted-foreground flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {new Date(item.lastUpdated).toLocaleTimeString()}
                    </div>
                    <Badge variant={getStatusColor(item.status) as any}>
                      {item.status}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="components" className="space-y-4">
            <div className="text-center py-8 text-muted-foreground">
              Component-specific documentation will be displayed here
            </div>
          </TabsContent>

          <TabsContent value="apis" className="space-y-4">
            <div className="text-center py-8 text-muted-foreground">
              API and service documentation will be displayed here
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
