
import React, { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { MarkdownRenderer } from '@/components/ui/markdown-renderer';
import { 
  FileText, 
  Code, 
  Database, 
  Zap, 
  Search,
  ExternalLink,
  GitBranch,
  Clock,
  RefreshCw,
  Download
} from 'lucide-react';
import { useRealTimeDocumentation } from '@/hooks/documentation/useRealTimeDocumentation';
import { documentationService } from '@/services/documentationService';

interface DocumentationItem {
  id: string;
  title: string;
  type: 'component' | 'hook' | 'service' | 'api' | 'page';
  path: string;
  lastUpdated: string;
  status: 'synced' | 'outdated' | 'generating';
  autoGenerated: boolean;
  content?: string;
}

export function LiveDocumentationPanel() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedType, setSelectedType] = useState<string>('all');
  const [documentationItems, setDocumentationItems] = useState<DocumentationItem[]>([]);
  const [selectedDocument, setSelectedDocument] = useState<DocumentationItem | null>(null);
  const [loading, setLoading] = useState(false);
  
  const { generateFullDocumentation, refreshData } = useRealTimeDocumentation();

  useEffect(() => {
    loadDocumentationItems();
  }, []);

  const loadDocumentationItems = async () => {
    setLoading(true);
    try {
      const docs = await documentationService.getAllDocumentationFiles();
      const items: DocumentationItem[] = docs.map(doc => {
        const metadata = doc.metadata || {};
        const analysis = metadata.analysis || {};
        
        return {
          id: doc.id,
          title: analysis.name || extractNameFromPath(doc.document_path),
          type: analysis.type || inferTypeFromPath(doc.document_path),
          path: doc.document_path,
          lastUpdated: doc.updated_at,
          status: 'synced',
          autoGenerated: doc.update_type === 'auto',
          content: doc.content
        };
      });
      
      setDocumentationItems(items);
    } catch (error) {
      console.error('Error loading documentation items:', error);
    } finally {
      setLoading(false);
    }
  };

  const extractNameFromPath = (path: string): string => {
    return path.split('/').pop()?.replace('.md', '') || 'Unknown';
  };

  const inferTypeFromPath = (path: string): 'component' | 'hook' | 'service' | 'api' | 'page' => {
    if (path.includes('/components/')) return 'component';
    if (path.includes('/hooks/')) return 'hook';
    if (path.includes('/services/')) return 'service';
    if (path.includes('/pages/')) return 'page';
    return 'api';
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'component': return <Code className="h-4 w-4" />;
      case 'hook': return <Zap className="h-4 w-4" />;
      case 'service': return <FileText className="h-4 w-4" />;
      case 'api': return <ExternalLink className="h-4 w-4" />;
      case 'page': return <Database className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'synced': return 'default';
      case 'outdated': return 'destructive';
      case 'generating': return 'secondary';
      default: return 'outline';
    }
  };

  const filteredItems = documentationItems.filter(item => {
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.path.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = selectedType === 'all' || item.type === selectedType;
    return matchesSearch && matchesType;
  });

  const handleRegenerateAll = async () => {
    setLoading(true);
    try {
      await generateFullDocumentation();
      await loadDocumentationItems();
    } catch (error) {
      console.error('Error regenerating documentation:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleViewDocument = (item: DocumentationItem) => {
    setSelectedDocument(item);
  };

  const handleDownloadDocument = (item: DocumentationItem) => {
    if (!item.content) return;
    
    const blob = new Blob([item.content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${item.title}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <GitBranch className="h-5 w-5" />
              Live Documentation Panel
            </CardTitle>
            <CardDescription>
              Real-time documentation generated from your codebase
            </CardDescription>
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={loadDocumentationItems}
              disabled={loading}
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
              Refresh
            </Button>
            <Button
              size="sm"
              onClick={handleRegenerateAll}
              disabled={loading}
            >
              Regenerate All
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="list" className="space-y-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="list">Documentation List</TabsTrigger>
            <TabsTrigger value="viewer">Document Viewer</TabsTrigger>
          </TabsList>

          <TabsContent value="list" className="space-y-4">
            <div className="flex gap-4">
              <div className="flex-1">
                <Input
                  placeholder="Search documentation..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full"
                />
              </div>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="px-3 py-2 border rounded-md"
              >
                <option value="all">All Types</option>
                <option value="component">Components</option>
                <option value="hook">Hooks</option>
                <option value="service">Services</option>
                <option value="page">Pages</option>
                <option value="api">APIs</option>
              </select>
            </div>

            {loading ? (
              <div className="text-center py-8">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2" />
                <p className="text-muted-foreground">Loading documentation...</p>
              </div>
            ) : filteredItems.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                {documentationItems.length === 0 
                  ? "No documentation generated yet. Click 'Regenerate All' to start."
                  : "No documentation matches your search criteria."
                }
              </div>
            ) : (
              <div className="grid gap-3 max-h-96 overflow-y-auto">
                {filteredItems.map((item) => (
                  <div
                    key={item.id}
                    className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50"
                  >
                    <div className="flex items-center gap-3">
                      {getTypeIcon(item.type)}
                      <div>
                        <div className="font-medium">{item.title}</div>
                        <div className="text-sm text-muted-foreground flex items-center gap-2">
                          <span>{item.path}</span>
                          {item.autoGenerated && (
                            <Badge variant="outline" className="text-xs">
                              Auto-generated
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="text-xs text-muted-foreground flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {new Date(item.lastUpdated).toLocaleTimeString()}
                      </div>
                      <Badge variant={getStatusColor(item.status) as unknown}>
                        {item.status}
                      </Badge>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleViewDocument(item)}
                      >
                        View
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDownloadDocument(item)}
                      >
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="viewer" className="space-y-4">
            {selectedDocument ? (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold">{selectedDocument.title}</h3>
                    <p className="text-sm text-muted-foreground">{selectedDocument.path}</p>
                  </div>
                  <Button
                    variant="outline"
                    onClick={() => handleDownloadDocument(selectedDocument)}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                </div>
                <div className="border rounded-lg p-4 max-h-96 overflow-y-auto">
                  {selectedDocument.content ? (
                    <MarkdownRenderer content={selectedDocument.content} />
                  ) : (
                    <p className="text-muted-foreground">No content available</p>
                  )}
                </div>
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                Select a document from the list to view its contents
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
